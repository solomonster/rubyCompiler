PROGRAM         : COMPSTMT

COMPSTMT        : STMTS OPT_TERMS

STMTS           : NONE
                | STMT
                | STMTS TERMS STMT

OPT_TERMS       : 
                | TERMS

TERMS           : TERM
                | TERMS ';'

TERM            : ';'
                | '\n' 

STMT            : 
                | put EXPR
                | return
                | return CALL_ARGS
                | EXPR                         


/* In ruby unlike other languages if , while are expressons , they return value
for example minimum = if x < y then x else y end
while loop and method definition return nil so they are part of expr
in ruby functions return value so they are expressions

*/

EXPR            : INT-LITERAL
                | STRING-LITERAL
                | VARIABLE
                | LHS = EXPR
                | '[' ']'
                |'['ARGS']'
                | EXPR and EXPR   /* logical-expression
                | EXPR or EXPR
                | not EXPR         */
                | EXPR tOROP EXPR
                | EXPR tANDOP EXPR 
                | EXPR '+' EXPR 
                | EXPR '-' EXPR 
                | EXPR '*' EXPR 
                | EXPR '/' EXPR
                | tUPLUS EXPR 
                | tMINUS EXPR
                | EXPR '>' EXPR 
                | EXPR tGEQ EXPR 
                | EXPR '<' EXPR 
                | EXPR tLEQ EXPR
                | EXPR tEQ EXPR 
                | EXPR tNEQ EXPR
                | '!' EXPR
                | IF-EXPR
                | WHILE-EXPR
                | FUNCTION-DECLARATION
                | '(' COMPSTMT ')' 
                | EXPR '[' ']'                
                | EXPR '[' ARGS ']'
                | COMMAND            
                | '!' COMMAND
                | PRIMARY
                
IF-EXPR         :if EXPR THEN     
                    COMPSTMT
                  IF-TAIL
                  end

IF-TAIL         : OPT-ELSE
                |ELSIF EXPR THEN
                   COMPSTMT
                 IF-TAIL

OPT-ELSE        :NONE
                |ELSE CMPSTMT  
          
WHILE-EXPR      : while EXPR DO COMPSTMT end                

DO              : TERM 
                | do 
                | TERM do

THEN            : TERM 
                | then 
                | TERM then 


// Function call 
COMMAND         : IDENTIFIER
                | IDENTIFIER CALL_ARGS  
                | IDENTIFIER '('CALL_ARGS_LIST')' 

CALL_ARGS_LIST  : NONE
                | ARGS

ARGS            : EXPR
                |ARGS ',' EXPR



// function declaration
FUNCTION-DECLARATION  :def FNAME ARGDECL
                          COMPSTMT
                        end 
                        
LHS             : VARIABLE                    
                | PRIMARY "[" "]"
                | PRIMARY "["ARGS"]"


ARGDECL         : '(' ARGLIST ')'       
                | ARGLIST TERM


ARGLIST        :EXPR
               |ARGLIST ',' EXPR 


VARIABLE        : VARNAME


FNAME           : IDENTIFIER 

VARNAME         : IDENTIFIER




                




